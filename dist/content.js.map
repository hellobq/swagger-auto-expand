{"version":3,"file":"content.js","sources":["../src/content.ts"],"sourcesContent":["// 定义 Swagger 节点的类型接口\n// 继承自 HTMLElement，确保有 DOM 元素的所有属性和方法\ninterface SwaggerSection extends HTMLElement {\n  classList: DOMTokenList\n}\n\n// 全局配置常量\n// 包含所有需要用到的选择器和类名\nconst CONFIG = {\n  // Swagger API 分组的容器选择器\n  targetSelector: '.opblock-tag-section',\n  // 展开/折叠按钮的选择器\n  expandButtonSelector: '.opblock-tag',\n  // 展开状态的类名\n  openClassName: 'is-open',\n  // Swagger 内容包装器的类名\n  wrapperClassName: 'wrapper'\n} as const\n\n\n/**\n * 检查 DOM 元素是否包含指定的类名\n * @param node - 要检查的 DOM 元素\n * @param className - 要检查的类名\n * @returns 是否包含该类名\n */\nconst hasClassName = (node: Element, className: string): boolean => \n  node.classList.contains(className)\n\n/**\n * 安全地查询所有匹配的 DOM 元素\n * 使用泛型确保返回类型的类型安全\n * @param parent - 父节点\n * @param selector - CSS 选择器\n * @returns 匹配的元素集合\n */\nconst querySelectorAllSafe = <T extends Element>(\n  parent: ParentNode,\n  selector: string\n): NodeListOf<T> => parent.querySelectorAll<T>(selector)\n\n\n/**\n * 展开页面上所有的 Swagger 分组\n * 查找所有分组并逐个展开\n */\nconst expandAllSections = (): void => {\n  const sections = querySelectorAllSafe<SwaggerSection>(\n    document,\n    CONFIG.targetSelector\n  )\n  sections.forEach((section: SwaggerSection): void => {\n    if (!hasClassName(section, CONFIG.openClassName)) {\n      const expandButton = section.querySelector(CONFIG.expandButtonSelector) as HTMLElement\n      expandButton?.click()\n    }\n  })\n}\n\n// 初始化 MutationObserver\n// 用于监听 DOM 变化，确保在动态加载的内容中也能正常工作\nconst observer = new MutationObserver((mutations: MutationRecord[]) => {\n  mutations.forEach(mutation => {\n    mutation.addedNodes.forEach((node: Node): void => {\n        if (!(node instanceof HTMLElement)) return\n      \n        const tagSections = querySelectorAllSafe<SwaggerSection>(\n          node,\n          CONFIG.targetSelector\n        )\n      \n        if (node.className === CONFIG.wrapperClassName && tagSections.length) {\n          expandAllSections()\n        }\n    })\n  })\n})\n\n// 开始监视 DOM 变化\n// 监视整个 body 元素的子节点变化\nobserver.observe(document.body, {\n  childList: true, // 监听子节点的增删\n  subtree: true    // 监听所有后代节点的变化\n})\n"],"names":["CONFIG","querySelectorAllSafe","parent","selector","querySelectorAll","MutationObserver","mutations","forEach","mutation","addedNodes","node","HTMLElement","tagSections","className","length","document","section","classList","contains","expandButton","querySelector","click","observe","body","childList","subtree"],"mappings":";;IAQA,IAAMA,IAEY,wBAFZA,IAIkB,gBAJlBA,IAMW,WANXA,IAQc,WAoBdC,IAAuB,SAC3BC,GACAC;QACkB,OAAAD,EAAOE,iBAAoBD;;IAsB9B,IAAIE,kBAAiB,SAACC;QACrCA,EAAUC,SAAQ,SAAAC;YAChBA,EAASC,WAAWF,SAAQ,SAACG;gBACzB,IAAMA,aAAgBC,aAAtB;oBAEA,IAAMC,IAAcX,EAClBS,GACAV;oBAGEU,EAAKG,cAAcb,KAA2BY,EAAYE,UAxBnDb,EACfc,UACAf,GAEOO,SAAQ,SAACS;wBAChB,IA1BiCH,IA0BNb,IAATgB,EAzBfC,UAAUC,SAASL,IAyB4B;4BAChD,IAAMM,IAAeH,EAAQI,cAAcpB;4BAC3CmB,aAAAA,EAAcE;AACf;wBA7BgB,IAAgBR;AA8BnC;AAQgD;AAU9C;AACF;AACF,QAISS,QAAQP,SAASQ,MAAM;QAC9BC,YAAW;QACXC,UAAS;;"}