{"version":3,"file":"content.js","sources":["../src/types.ts","../src/content.ts"],"sourcesContent":["// 定义 Swagger 节点的类型接口\n// 继承自 HTMLElement，确保有 DOM 元素的所有属性和方法\nexport interface SwaggerSection extends HTMLElement {\n    classList: DOMTokenList\n}\n\n// 全局配置常量\n// 包含所有需要用到的选择器和类名\nexport const CONFIG = {\n    // Swagger API 分组的容器选择器\n    targetSelector: '.opblock-tag-section',\n    // 展开/折叠按钮的选择器\n    expandButtonSelector: '.opblock-tag',\n    // 展开状态的类名\n    openClassName: 'is-open',\n    // Swagger 内容包装器的类名\n    wrapperClassName: 'wrapper'\n} as const\n","import { SwaggerSection, CONFIG } from './types'\n\n/**\n * 检查 DOM 元素是否包含指定的类名\n * @param node - 要检查的 DOM 元素\n * @param className - 要检查的类名\n * @returns 是否包含该类名\n */\nconst hasClassName = (node: Element, className: string): boolean => \n  node.classList.contains(className)\n\n/**\n * 安全地查询所有匹配的 DOM 元素\n * 使用泛型确保返回类型的类型安全\n * @param parent - 父节点\n * @param selector - CSS 选择器\n * @returns 匹配的元素集合\n */\nconst querySelectorAllSafe = <T extends Element>(\n  parent: ParentNode,\n  selector: string\n): NodeListOf<T> => parent.querySelectorAll<T>(selector)\n\n\n/**\n * 展开页面上所有的 Swagger 分组\n * 查找所有分组并逐个展开\n */\nconst expandAllSections = (): void => {\n  const sections = querySelectorAllSafe<SwaggerSection>(\n    document,\n    CONFIG.targetSelector\n  )\n  sections.forEach((section: SwaggerSection): void => {\n    if (!hasClassName(section, CONFIG.openClassName)) {\n      const expandButton = section.querySelector(CONFIG.expandButtonSelector) as HTMLElement\n      expandButton?.click()\n    }\n  })\n}\n\n/**\n * 从 URL hash 中获取目标 controller 名称\n * @returns controller 名称或 null\n */\nconst getTargetControllerFromHash = (): string | null => {\n  const hash = decodeURIComponent(window.location.hash)\n  if (!hash) return null\n  \n  const match = hash.match(/\\/([^\\/$]+)/)\n  return match ? match[1] : null\n}\n\n/**\n * 展开指定的 controller 分组\n * @param targetController - 要展开的 controller 名称\n * @returns 是否找到并展开了目标 controller\n */\nconst expandTargetSection = (targetController: string): HTMLElement | null => {\n  const sections = querySelectorAllSafe<SwaggerSection>(\n    document,\n    CONFIG.targetSelector\n  )\n  \n  let targetSection: HTMLElement | null = null\n  sections.forEach((section: SwaggerSection): void => {\n    if (!targetSection) {\n      const expandButton = section.querySelector(CONFIG.expandButtonSelector) as HTMLElement\n      if (expandButton.innerText.toLowerCase().includes(targetController)) {\n        targetSection = expandButton\n      }\n    }\n  })\n  \n  return targetSection\n}\n\n/**\n * 处理展开逻辑\n * 优先展开 URL hash 中指定的 controller  eg http://192.168.0.45:28001/swagger-ui.html#/缓存配置接口/clearUsingPOST 优先展开 “缓存配置接口”\n * 如果没有则展开所有分组\n */\nconst handleExpand = (): void => {\n  const targetController = getTargetControllerFromHash()\n  if (targetController) {\n    const targetSection: HTMLElement | null = expandTargetSection(targetController)\n    if (targetSection) {\n      targetSection.click()\n      return\n    }\n  }\n\n  expandAllSections()\n}\n\n// 初始化 MutationObserver\n// 用于监听 DOM 变化，确保在动态加载的内容中也能正常工作\nconst observer = new MutationObserver((mutations: MutationRecord[]) => {\n  mutations.forEach(mutation => {\n    mutation.addedNodes.forEach((node: Node): void => {\n      if (!(node instanceof HTMLElement)) return\n      \n      const tagSections = querySelectorAllSafe<SwaggerSection>(\n        node,\n        CONFIG.targetSelector\n      )\n      \n      if (node.className === CONFIG.wrapperClassName && tagSections.length) {\n        handleExpand()\n      }\n    })\n  })\n})\n\n// 开始监视 DOM 变化\n// 监视整个 body 元素的子节点变化\nobserver.observe(document.body, {\n  childList: true, // 监听子节点的增删\n  subtree: true    // 监听所有后代节点的变化\n})\n"],"names":["CONFIG","querySelectorAllSafe","parent","selector","querySelectorAll","handleExpand","targetController","hash","decodeURIComponent","window","location","match","getTargetControllerFromHash","targetSection","sections","document","forEach","section","expandButton","querySelector","innerText","toLowerCase","includes","expandTargetSection","click","className","classList","contains","MutationObserver","mutations","mutation","addedNodes","node","HTMLElement","tagSections","length","observe","body","childList","subtree"],"mappings":";;IAQO,IAAMA,IAEO,wBAFPA,IAIa,gBAJbA,IAMM,WANNA,IAQS,WCEhBC,IAAuB,SAC3BC,GACAC;QACkB,OAAAD,EAAOE,iBAAoBD;OA6DzCE,IAAe;QACnB,IAAMC,IAtC4B;YAClC,IAAMC,IAAOC,mBAAmBC,OAAOC,SAASH;YAChD,KAAKA,GAAM,OAAO;YAElB,IAAMI,IAAQJ,EAAKI,MAAM;YACzB,OAAOA,IAAQA,EAAM,KAAK;AAC5B,SAgC2BC;QACzB,IAAIN,GAAkB;YACpB,IAAMO,IA3BkB,SAACP;gBAC3B,IAAMQ,IAAWb,EACfc,UACAf,IAGEa,IAAoC;gBAUxC,OATAC,EAASE,SAAQ,SAACC;oBAChB,KAAKJ,GAAe;wBAClB,IAAMK,IAAeD,EAAQE,cAAcnB;wBACvCkB,EAAaE,UAAUC,cAAcC,SAAShB,OAChDO,IAAgBK;AAEnB;AACH,qBAEOL;AACT,aAU8CU,CAAoBjB;YAC9D,IAAIO,GAEF,YADAA,EAAcW;AAGjB;QA7DgBvB,EACfc,UACAf,GAEOgB,SAAQ,SAACC;YAChB,IA1BiCQ,IA0BNzB,IAATiB,EAzBfS,UAAUC,SAASF,IAyB4B;gBAChD,IAAMP,IAAeD,EAAQE,cAAcnB;gBAC3CkB,aAAAA,EAAcM;AACf;YA7BgB,IAAgBC;AA8BnC;AAuDF;IAIiB,IAAIG,kBAAiB,SAACC;QACrCA,EAAUb,SAAQ,SAAAc;YAChBA,EAASC,WAAWf,SAAQ,SAACgB;gBAC3B,IAAMA,aAAgBC,aAAtB;oBAEA,IAAMC,IAAcjC,EAClB+B,GACAhC;oBAGEgC,EAAKP,cAAczB,KAA2BkC,EAAYC,UAC5D9B;AARwC;AAU5C;AACF;AACF,QAIS+B,QAAQrB,SAASsB,MAAM;QAC9BC,YAAW;QACXC,UAAS;;"}